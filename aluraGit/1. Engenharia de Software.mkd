Sobre, Equipes Ágeis, gerenciamento de qualidade e Entrega Contínua, entende-se abordagens de Engenharia de Software, que é o emprego de boas práticas afim de nos ajudar a desenvolver produtos com qualidade, dentro do prazo e custos previsto, que satisfaçam as expectativas dos clientes. Podemos dividir a atuação da engenharia de software em camadas, onde uma esta contida em outra sendo a base delas a FOCO EM QUALIDADE, que tem comprometimento organizacional com a promoção de uma cultura de aperfeiçoamento continuo de processos. A próxima camada seriam os PROCESSOS aqui abordado como Gerenciamento de qualidade, é a liga que mantém as camadas de tecnologia coesa e possibilita o desenvolvimento de forma racional e dentro do prazo, estabelece o contexto no qual são aplicados métodos técnico(amostragem, PDCA, espinha de peixe), são produzidos produtos derivados (modelos, documentos como fluxograma, dados como diagrama de dispersão, relatórios, formularios como folha de vericação, etc.), são estabelecidos marcos, mudanças são geridas de forma apropriada através da análise dos dados coletados para melhor planejamento. É no gerenciamento que é definido a metodologia a ser utilizada, que é a próxima camada. As metodologias são informações técnicas para o desenvolvimento de software, que envolvem uma ampla fama de tarefas, começaram a ser definidas a partir da década de 70, junto a Crise de Software, termo utilizado frente as dificuldades enfrentadas ao rápido crescimento da demanda de softwares, mas só em 2001 foi documentado o Manifesto Ágil, que apesar de ser baseado em práticas já existentes como Modelo de processo Incremental, Cascata, RUP, etc. Somente ha duas décadas se consolidou em forma de protesto para que a forma de desenvolvimento pudesse ser norteada mais pela colaboração de todos indivíduos interessados do que pelos processos e ferramenta. As EQUIPES ÁGEIS são multidisciplinar, assim mantendo o projeto comprometido com todos desenvolvedores, do começo até a entrega, ele não é em momento nenhum passado para outros times, como no modelo cascata, onde a evolução é dividida em equipes especializadas, isso só é possível através da implementação da auto organização, onde toda a equipe possui um objetivo comum e dessa forma estão sempre em busca de alcança-lo, outra característica é o time-box que determina um período para que a auto-organização funcione e as restrições, que delimitam um limite mas não define nada, mantendo a criatividade para soluções. Existem tres tipos de equipe: Funcionalidade, foca em melhorias para o usuário, Componente, focada em otimizar um elemento, Jornada do Cliente, foca em grupos que possui comportamento similar.
O SCRUM é um método, consistente com a manifesto ágil, que orientam as atividades de desenvolvimento dentro de um processo que incorporam as seguintes atividades estruturais: requisitos, análise, projeto, evolução e entrega
Em cada  atividade metodológica, ocorrem tarefas a realizar dentro de um padrão de processos chamado sprint. O trabalho realizado dentro de um sprint é adaptado ao problema em questão e definido em tempo real pela equipe Scrum. Em cada ciclo de entrega do Scrum itens do backlog do produto (Priorização da funcionalidades do produto desejado pelo cliente) são retirados e avaliados pela equipe de desenvolvimento junto com os representantes de negócio, os itens que estiverem dentro da capacidade da equipe para implementação, são incluidos na sprint atual e desenvolvidos durante o perpiodo da sprint(pode ter 15, 20 ou ate 30 dias|), durante esse periodo são realizados reuniões diarias (daylis) para acompanhamento e alinhamentos, ao final há uma reunião de revisão (review) e outra de avaliação da sprint, chamada de retrospectiva.
SCRUM é dividido em três focos : 1.  eficácia (o produto certo), a equipe esta trabalhando em algo realmente necessário, há uma pessoa para identificar qual seria esse problema, o PRODUCT OWNER, este profissional atua em nível estratégico, dfini uma visão para o produto fomentando a criatividade para soluções, em nível Tático, priorização do backlog, organização das atividades e em nível Operacional, acompanhando a evolução do projeto dia a dia.
2.  qualidade onde o Dev Team (Equipe de desenvolvimento), aprende e se autogerencia, é composta por diversos especialistas que definem como o produto sera produzido da melhor forma, não pode ter mais de 10 integrantes, não reconhece titulos todos são membros e são pessoas T-shaped, ou seja, tem uma expertise, mas também consegue ser generalista podendo atuar com tranquilidade em uma gama diferente de papéis e assuntos, com isso mantendo o indicativo  Truckfactor alto (quantas pessoas precisam ser atropeladas para equipe parar).
3.  eficiência, fica a cargo do Scrum  Master que tira os impeditivos para cumprir o prazo, é um lider servidor, tem muito conhecimento e esta sempre disponivel, um coach, no sentido de direcioanar, expert, consegue passar seu conhecimento, é um agente de mudança.
O Kanbam é uma ferramenta que permite vizualizar o fluxo de trabalho, Limitar o WIP (Trabalho em andamento), assim focar o esforço em entregar e não em começar mais, com isso as pessoas envolvidas vão transitar em todo o fluxo, se auto-organizando para entregar. É constituído por tarefas e é dividido em 5 etapas: documentação, prototipação, codificação, teste e entrega. Em cada uma das etapas são afixados post-its, que costumam conter uma breve explicação da tarefa. Um determinado grupo de pessoas atuam em cada etapa, podendo ser uma, duas, ou até mais.

A terceira camada são as ferramentas, é aquilo que da suporte automatizado aos métodos, foi abordado em Entrega Continua, que é realizar deploys frequentes e preferencialmente automatizados e com feedbacks rápidos. O principal padrão para atingirmos o estado de entrega contínua,  é o pipeline de deploy: nosso software passará por várias etapas automatizadas que irão gerar mais qualidade no produto final. Os principios são, Automatize,Versione, Repita, Garanta a qualidade, Defina o "done", Crie o delivery team, Use melhoria contínua.
As etapas clássicas do pipeline: build unit test, AAT, UAT e Produção.
COMMIT STAGE
O commit stage deve executar rápido (menos de 10 minutos) e iniciar a cada commit
1. BUILD é a construção do software, inicia a pipeline com seu commit, já com testes de unidade e integração, é independente do sistema, possui ambiente efêmeros e similares aos de homologação,irá gerar um JAR, DLL, imagem Docker, GEM ou ZIP, dependendo da sua plataforma.
ANALYSIS Os relatórios de qualidade são gerados nessa etapa. Podem ser executados em paralelo aos testes de unidade.
o resultado do commit stage, O servidor de construção deve publicar os relatórios da análise de código junto com os testes de unidade. (jenkins)
STAGE TEST
AUTOMATED ACCEPTANCE TESTING STAGE
O stage AAT foca nos testes funcionais, que testam o sistema todo, baseado em um requisito (UUT,Teste de performance e Capacidade)
O commit stage deve executar rápido (menos de 10 minutos) e iniciar a cada commit
O stage AAT inicia quando commit stage foi executado com sucesso
O stage AAT é mais demorado
2. Unit Test é o teste de aceitação unitária, são gerados relatórios sobre a qualidade do sistema, é a promoção do artefato
Nesta fase queremos testar a aplicação inteira e avaliar se ela preenche os requisitos de negócio. 
Os testes de aceitação acessam a interface do software, como seria a experiência de usuário, e a ferramenta clássica para esta etapa é o Selenium. O teste de aceitação fornece uma garantia maior do ponto de vista do usuário. A responsabilidade da definição do teste é divida entre toda equipe, assim como a correção de erros. Para garantir que o ambiente está adequado, devemos realizar um conjunto de pequenos testes dos rescursos principais. Precisamos de bons requisitos para escrever as especificações e o teste na aplicação final real.
STAGE HOMOLOGAÇÃO 
Teste de Hoologação (User Acceptance Testing Stage)
Teste de carga (Capacity Testing Stage)
O ambiente de homologação serve para o usuário final validar se o software atende aos requisitos e expectativas. A equipe deve participar nesses testes e eles representam uma oportunidade de aprender e receber feedback sobre a aceitação e usabilidade do software. Esses testes devem ser executados desde início do projeto.
O ambiente para testes de carga serve para garantir que o software atende os requisitos não funcionais, como desempenho e carga. Os testes devem fazer parte do desenvolvimento do software e ser aplicados em ciclos. Aqui, é importante definir métricas claras e monitorar o sistema.

4. Produção onde o artefato sera 
Deploy é criar um ambiente, garantir que ele exista de maneira correta, instalar o software e configurá-lo. Já o release é a publicação de fato, o momento em que o cliente utiliza o produto.São duas etapas diferentes que podem dar erradas. Separamos a decisão técnica(deploy) da decisão de negócio(release)
Devemos desacoplar o deploy do release, e para isso existem estratégias como:

Blue/Green Deployment
o deploy já foi realizado, mas temos duas versões: uma antiga(azul) e a nova(verde) que já está em ambiente de produção.
Entre as versões há um roteador, então em algum momento podemos modificar o fluxo para o novo ambiente, a nova versão. O ambiente velho (blue) fica no ar ainda um bom tempo caso algum problema surja. As conexões que existiam para o azul ficarão disponíveis até que realmente apenas a versão verde esteja totalmente funcional.
Canary Releases ou "dark lauching" 
Neste caso, as duas versões são utilizadas ao mesmo tempo, tanto azul quanto a verde, mas a nova versão não é acessada por todos os usuários. Uma parcela dos usuários que têm acesso a nova versão serão agentes de um teste.
O critério de direcionamento da nova versão em teste para alguns usuários varia, podemos usar 5% do nosso tráfego para a nova versão e monitorar o comportamento do sistema. Outro critério possível é o geográfico ou em estratégias de mercado, idade e assim por diante, isso vai variar de acordo com as necessidades do negócio e dados disponíveis sobre os usuários.
Uma vez que o teste for concluído, os usuários integralmente são direcionados para a nova versão. Esse metodologia também é utilizada para A/B Test.
Feature Toggles (Feature Flags)
 também um dark lauching, mas neste caso trata-se de uma configuração no código que disponibiliza um switch de versões. Esta estratégia pode ser combinada ao Canary Release: uma parcela dos usuários que será direcionado para a versão nova utilizará o Feature Toggles habilitado